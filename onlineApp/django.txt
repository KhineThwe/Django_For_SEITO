Starting your web application with django
---------------------------------------------
1.check python with "python" command
2.check pip verson with "pip --version" command
3.install virtual environment wrapper with "pip install virtualenvwrapper-win"
4.After installing virtual environment,we have to configure virtual env with "mkvirtualenv onlineVM" command
instead of onlineVM,you can use other names whatever you want.And make sure you remember that env's name.
5.As a fifth step,You have to install django in your virtual env with "pip install django"
As a result,lightweight server will come as a built-in.
6.In your virtual env,you have to create project folder and project file in your project file.
7.To create project folder,"mkdir onlineProject".Instead of "onlineProject",you can also use other names as well.
8.And go into your project folder with "cd onlineProject".
9.And you can use "dir" command to list directories inside your project folder.
10.To create project file,"django-admin startproject onlineApp",Here onlineApp is project file's name and you can use other names as well.
11.And then "cd onlineApp" and "dir" command.You'll see "manage.py file,onlineApp folder" directories.
12.And run "python manage.py runserver" command inside project directories.


First Web App
------------------------
1.cd pjName ---> cd "onlineProject"
2.cd onlineApp 
3.To enable python virtual env -----> workon onlineVM
4.To create another app or project file inside onlineVM ---> python manage.py startapp onlineSecondApp


First Step
----------------------------
Inside onlineSecondApp
1.create urls.py ----> and link like that ---> path('',views.home,name='home'),
2.Inside views.py --> we'll write contents inside views.py
3.And then onlineApp(urls) , need to modify
like that ---> path('',include('onlineSecondApp.urls'))
and import include beside path
4.You have to import views.py inside urls.py with "from .import views"
5.And run with ---> cd onlineApp ---> python manage.py runserver

Second Step
--------------------------------------------------
ပြောင်းနေတဲ့ content တွေကို dynamic content or django template content language လို့ခေါ်တယ်
မပြောင်းနေပဲ အသေရှိနေတဲ့ content တွေကိုကျ static content လို့ခေါ်တယ်
Django Template language
--------------------------
1.Template folder တစ်ခုအား original App အတွင်းတွင် ---> onlineApp ဖန်တီးမည်။(templates)
2.Template folder ထဲတွင် ကြိုက်နှစ်သက်ရာ name ဖြင့် html file တစ်ခုဖန်တီးမည်။
ထို html file အား template file အဖြစ်အသုံးပြုမည်ဖြစ်သောကြောင့် ထို html tag ထဲတွင် 3name ဆိုသည့် variable
ကိုရေးသားခဲ့မည်။ (<h1>Hello I am {{name}}</h1>)
3.Settings.py ထဲတွင် templates folder path လမ်းကြောင်း ပေးမည်။ Line 55 lout mhar
( 'DIRS': [os.path.join(BASE_DIR,'templates')],)
4.Views.py ထဲတွင် HTTPresponse မှတစ်ဆင့် render method ပြောင်းမည်။ page များကို ဖော်ပြလိုတဲ့ အခါ တွင် render method 
ကိုသုံးရသည်။
5.Render method ထဲတွင် parameter 3 ခုပါမည်။ First parameter-->request,Second parameter---> html file name
နှင့် third parameter--> မိမိတို့ဖော်ပြလိုသော dynamic content

views.py file ကနေပဲ html file တွေကို data လှမ်းထည့်ပေးတယ်လို့ မှတ်ရမယ်


Template Inheritance
--------------------------------
1.templates folder ကို settings ထဲမှာသွားပြီးမပေးထားမိရင် Inheritance ချိန်မှာ folder နာမည်ကို ခေါ်ပေးရမယ်---> 
Eg: {%extends "templates/paraent.html"%}  
2.ပေးထားပြီးဆိုရင် Eg: {%extends "paraent.html"%}
